<?xml version="1.0" encoding="UTF-8"?>
<beans 	xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:aop="http://www.springframework.org/schema/aop"
          xmlns:tx="http://www.springframework.org/schema/tx"

          xmlns:p="http://www.springframework.org/schema/p"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xmlns:task="http://www.springframework.org/schema/task"
          xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		 http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task-3.0.xsd
    ">
<!--
        <context:component-scan base-package="com.mark.java.service"/>
        <context:component-scan base-package="com.mark.java.entity"/>
        <context:component-scan base-package="com.mark.java.DAO"/>
-->


    <!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。 -->
    <context:component-scan base-package="com.mark">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <context:property-placeholder ignore-unresolvable="true" location="classpath:/hibernate.properties, classpath:redis.properties" />

    <!-- 使用C3P0数据源，MySQL数据库   ="com.mchange.v2.c3p0.ComboPooledDataSource"                                -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" lazy-init="true">
        <!-- MySQL5
        <property name="driverClass"  value="${driverClassName}"></property>
        <property name="jdbcUrl"      value="${url}"></property>
        <property name="user"         value="${username}"></property>
        <property name="password"     value="${password}"></property>
        <property name="maxPoolSize"  value="40"></property>
        <property name="minPoolSize"  value="1"></property>
        <property name="initialPoolSize" value="1"></property>
        <property name="maxIdleTime"  value="20"></property>
        -->
        <property name="driverClassName" value="${driver}" />
        <property name="url" 			value="${url}" />
        <property name="username" 		value="${username}" />
        <property name="password" 		value="${password}" />

        <!-- 配置密码加密和统计相关参数，统计慢sql的单位为毫秒，此处配置为300秒钟，超过300秒钟的sql为慢sql -->
        <property name="filters" 		value="${filters}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" 	value="${initialSize}" />
        <property name="minIdle" 		value="${minIdle}" />
        <property name="maxActive" 		value="${maxActive}" />
        <property name="maxWait" 		value="${maxWait}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，相当于C3P0的idleConnectionTestPeriod 参数，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
        <!-- 测试连接，单位为毫秒 -->
        <property name="validationQueryTimeout" value="${validationQueryTimeout}" />
        <property name="validationQuery" value="${validationQuery}" />
        <property name="testWhileIdle" value="${testWhileIdle}" />
        <property name="testOnBorrow" value="${testOnBorrow}" />
        <property name="testOnReturn" value="${testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <!-- 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。 -->
        <property name="poolPreparedStatements" value="${poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${maxPoolPreparedStatementPerConnectionSize}" />
    </bean>

    <!-- session工厂 -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan" value="com.mark.java.entity" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>

                <prop key="hibernate.query.substitutions">true 1, false 0, yes 1, no 0</prop>
            </props>
        </property>
        <property name="configLocation">
            <value>classpath:hibernate/hibernate.cfg.xml</value>
        </property>
    </bean>

    <!--配置事务的传播特性 -->
    <!--<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager" p:sessionFactory-ref="sessionFactory" />-->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" /><!--启动spring事务注解功能 -->




</beans>